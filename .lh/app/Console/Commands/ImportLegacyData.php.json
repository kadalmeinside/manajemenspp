{
    "sourceFile": "app/Console/Commands/ImportLegacyData.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1754210515147,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1754211723399,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,11 +57,21 @@\n         $totalRows = count(file($filePath)) - 1;\n         $progressBar = $this->output->createProgressBar($totalRows);\n \n         $this->info(\"Membaca {$totalRows} baris data siswa...\");\n+        \n+        // ### PERBAIKAN ###: Atur lokal Carbon ke Bahasa Indonesia\n+        Carbon::setLocale('id');\n+        \n         $progressBar->start();\n \n         while (($row = fgetcsv($file)) !== false) {\n+            // Lewati baris kosong\n+            if (empty(array_filter($row))) {\n+                $progressBar->advance();\n+                continue;\n+            }\n+            \n             $data = array_combine($header, $row);\n \n             try {\n                 DB::transaction(function () use ($data, $months, $invoiceYear) {\n@@ -70,25 +80,32 @@\n                         ['nama_kelas' => trim($data['Cabang'])],\n                         ['biaya_spp_default' => (int) filter_var($data['SPP'], FILTER_SANITIZE_NUMBER_INT)]\n                     );\n \n+                    // ### PERBAIKAN ###: Tambahkan pengecekan jika tanggal daftar kosong\n+                    $tanggalBergabung = null;\n+                    if (!empty(trim($data['TGL DAFTAR']))) {\n+                        $tanggalBergabung = Carbon::createFromFormat('d-M-y', trim($data['TGL DAFTAR']))->startOfDay();\n+                    } else {\n+                        // Jika tanggal kosong, gunakan tanggal hari ini sebagai default\n+                        $tanggalBergabung = now()->startOfDay();\n+                    }\n+\n                     // 2. Buat atau perbarui data Siswa (tanpa User)\n-                    // Menggunakan nama dan nama wali sebagai kunci unik untuk mencegah duplikat\n                     $siswa = Siswa::updateOrCreate(\n                         [\n                             'nama_siswa' => trim($data['NAMA MURID']),\n                             'nomor_telepon_wali' => trim($data['No. Telp']),\n                         ],\n                         [\n                             'id_kelas' => $kelas->id_kelas,\n                             'status_siswa' => 'Aktif',\n-                            'tanggal_bergabung' => Carbon::createFromFormat('d-M-y', $data['TGL DAFTAR'])->startOfDay(),\n+                            'tanggal_bergabung' => $tanggalBergabung,\n                             'jumlah_spp_custom' => (int) filter_var($data['SPP'], FILTER_SANITIZE_NUMBER_INT),\n-                            'id_user' => null, // id_user sengaja dikosongkan\n+                            'id_user' => null,\n                         ]\n                     );\n \n-                    // Generate NIS jika belum ada\n                     if (!$siswa->nis) {\n                         $siswa->generateNis();\n                     }\n \n@@ -107,10 +124,10 @@\n                                     'description' => \"SPP {$periodeTagihan->isoFormat('MMMM YYYY')} - {$siswa->nama_siswa}\",\n                                     'amount' => (int) filter_var($data[$monthName], FILTER_SANITIZE_NUMBER_INT),\n                                     'total_amount' => (int) filter_var($data[$monthName], FILTER_SANITIZE_NUMBER_INT),\n                                     'admin_fee' => 0,\n-                                    'status' => 'PAID', // Langsung set sebagai LUNAS\n-                                    'paid_at' => $periodeTagihan->copy()->endOfMonth(), // Asumsikan dibayar di akhir bulan\n+                                    'status' => 'PAID',\n+                                    'paid_at' => $periodeTagihan->copy()->endOfMonth(),\n                                     'due_date' => $periodeTagihan->copy()->endOfMonth(),\n                                 ]\n                             );\n                         }\n"
                },
                {
                    "date": 1754211998903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,49 +49,45 @@\n             'JANUARI' => 1, 'FEBRUARI' => 2, 'MARET' => 3, 'APRIL' => 4, 'MEI' => 5, 'JUNI' => 6,\n             'JULI' => 7, 'AGUSTUS' => 8, 'SEPTEMBER' => 9, 'OKTOBER' => 10, 'NOVEMBER' => 11, 'DESEMBER' => 12,\n         ];\n         \n-        // Asumsi tahun untuk invoice yang sudah berjalan adalah 2024, berdasarkan TGL DAFTAR\n-        $invoiceYear = 2024;\n-\n-        // Hitung total baris untuk progress bar\n         $totalRows = count(file($filePath)) - 1;\n         $progressBar = $this->output->createProgressBar($totalRows);\n \n         $this->info(\"Membaca {$totalRows} baris data siswa...\");\n         \n-        // ### PERBAIKAN ###: Atur lokal Carbon ke Bahasa Indonesia\n         Carbon::setLocale('id');\n         \n         $progressBar->start();\n \n         while (($row = fgetcsv($file)) !== false) {\n-            // Lewati baris kosong\n             if (empty(array_filter($row))) {\n                 $progressBar->advance();\n                 continue;\n             }\n             \n             $data = array_combine($header, $row);\n \n             try {\n-                DB::transaction(function () use ($data, $months, $invoiceYear) {\n-                    // 1. Cari atau buat Kelas (Cabang)\n+                DB::transaction(function () use ($data, $months) {\n+                    $sppDefault = (int) filter_var($data['SPP'], FILTER_SANITIZE_NUMBER_INT);\n+                    if ($sppDefault <= 0) {\n+                        // Lewati baris jika data SPP tidak valid\n+                        return;\n+                    }\n+\n                     $kelas = Kelas::firstOrCreate(\n                         ['nama_kelas' => trim($data['Cabang'])],\n-                        ['biaya_spp_default' => (int) filter_var($data['SPP'], FILTER_SANITIZE_NUMBER_INT)]\n+                        ['biaya_spp_default' => $sppDefault]\n                     );\n \n-                    // ### PERBAIKAN ###: Tambahkan pengecekan jika tanggal daftar kosong\n                     $tanggalBergabung = null;\n                     if (!empty(trim($data['TGL DAFTAR']))) {\n                         $tanggalBergabung = Carbon::createFromFormat('d-M-y', trim($data['TGL DAFTAR']))->startOfDay();\n                     } else {\n-                        // Jika tanggal kosong, gunakan tanggal hari ini sebagai default\n                         $tanggalBergabung = now()->startOfDay();\n                     }\n \n-                    // 2. Buat atau perbarui data Siswa (tanpa User)\n                     $siswa = Siswa::updateOrCreate(\n                         [\n                             'nama_siswa' => trim($data['NAMA MURID']),\n                             'nomor_telepon_wali' => trim($data['No. Telp']),\n@@ -99,20 +95,28 @@\n                         [\n                             'id_kelas' => $kelas->id_kelas,\n                             'status_siswa' => 'Aktif',\n                             'tanggal_bergabung' => $tanggalBergabung,\n-                            'jumlah_spp_custom' => (int) filter_var($data['SPP'], FILTER_SANITIZE_NUMBER_INT),\n+                            'jumlah_spp_custom' => $sppDefault,\n                             'id_user' => null,\n                         ]\n                     );\n \n                     if (!$siswa->nis) {\n                         $siswa->generateNis();\n                     }\n \n-                    // 3. Buat Invoice untuk setiap bulan yang sudah dibayar\n+                    // ### PERBAIKAN ###: Logika dinamis untuk menentukan tahun invoice\n                     foreach ($months as $monthName => $monthNumber) {\n                         if (isset($data[$monthName]) && !empty($data[$monthName])) {\n+                            \n+                            // Tentukan tahun yang benar untuk invoice\n+                            // Jika bulan invoice lebih kecil dari bulan daftar, berarti itu tahun depannya.\n+                            // Contoh: Daftar Sep 2024, bayar Jan -> Jan 2025\n+                            $invoiceYear = ($monthNumber < $tanggalBergabung->month) \n+                                ? $tanggalBergabung->year + 1 \n+                                : $tanggalBergabung->year;\n+\n                             $periodeTagihan = Carbon::create($invoiceYear, $monthNumber, 1)->startOfMonth();\n                             \n                             Invoice::updateOrCreate(\n                                 [\n@@ -133,10 +137,10 @@\n                         }\n                     }\n                 });\n             } catch (Throwable $e) {\n-                $this->error(\"\\n Gagal memproses baris untuk siswa: \" . $data['NAMA MURID'] . \". Error: \" . $e->getMessage());\n-                Log::error(\"Import Gagal: \" . $data['NAMA MURID'], ['error' => $e->getMessage()]);\n+                $this->error(\"\\n Gagal memproses baris untuk siswa: \" . ($data['NAMA MURID'] ?? 'N/A') . \". Error: \" . $e->getMessage());\n+                Log::error(\"Import Gagal: \" . ($data['NAMA MURID'] ?? 'N/A'), ['error' => $e->getMessage()]);\n             }\n             \n             $progressBar->advance();\n         }\n"
                },
                {
                    "date": 1754236218529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,21 +43,18 @@\n \n         $file = fopen($filePath, 'r');\n         $header = fgetcsv($file); // Baca baris pertama sebagai header\n \n-        // Mapping nama bulan ke nomor bulan\n         $months = [\n-            'JANUARI' => 1, 'FEBRUARI' => 2, 'MARET' => 3, 'APRIL' => 4, 'MEI' => 5, 'JUNI' => 6,\n-            'JULI' => 7, 'AGUSTUS' => 8, 'SEPTEMBER' => 9, 'OKTOBER' => 10, 'NOVEMBER' => 11, 'DESEMBER' => 12,\n+            'januari' => 1, 'februari' => 2, 'maret' => 3, 'april' => 4, 'mei' => 5, 'juni' => 6,\n+            'juli' => 7, 'agustus' => 8, 'september' => 9, 'oktober' => 10, 'november' => 11, 'desember' => 12,\n         ];\n         \n         $totalRows = count(file($filePath)) - 1;\n         $progressBar = $this->output->createProgressBar($totalRows);\n \n         $this->info(\"Membaca {$totalRows} baris data siswa...\");\n         \n-        Carbon::setLocale('id');\n-        \n         $progressBar->start();\n \n         while (($row = fgetcsv($file)) !== false) {\n             if (empty(array_filter($row))) {\n@@ -68,35 +65,29 @@\n             $data = array_combine($header, $row);\n \n             try {\n                 DB::transaction(function () use ($data, $months) {\n-                    $sppDefault = (int) filter_var($data['SPP'], FILTER_SANITIZE_NUMBER_INT);\n+                    $sppDefault = (int) $data['spp'];\n                     if ($sppDefault <= 0) {\n-                        // Lewati baris jika data SPP tidak valid\n                         return;\n                     }\n \n                     $kelas = Kelas::firstOrCreate(\n-                        ['nama_kelas' => trim($data['Cabang'])],\n+                        ['nama_kelas' => trim($data['cabang'])],\n                         ['biaya_spp_default' => $sppDefault]\n                     );\n \n-                    $tanggalBergabung = null;\n-                    if (!empty(trim($data['TGL DAFTAR']))) {\n-                        $tanggalBergabung = Carbon::createFromFormat('d-M-y', trim($data['TGL DAFTAR']))->startOfDay();\n-                    } else {\n-                        $tanggalBergabung = now()->startOfDay();\n-                    }\n+                    $tanggalBergabung = !empty(trim($data['tgl_daftar'])) ? new Carbon($data['tgl_daftar']) : now();\n \n                     $siswa = Siswa::updateOrCreate(\n                         [\n-                            'nama_siswa' => trim($data['NAMA MURID']),\n-                            'nomor_telepon_wali' => trim($data['No. Telp']),\n+                            'nama_siswa' => trim($data['nama_murid']),\n+                            'nomor_telepon_wali' => trim($data['no_telp']),\n                         ],\n                         [\n                             'id_kelas' => $kelas->id_kelas,\n                             'status_siswa' => 'Aktif',\n-                            'tanggal_bergabung' => $tanggalBergabung,\n+                            'tanggal_bergabung' => $tanggalBergabung->startOfDay(),\n                             'jumlah_spp_custom' => $sppDefault,\n                             'id_user' => null,\n                         ]\n                     );\n@@ -104,17 +95,12 @@\n                     if (!$siswa->nis) {\n                         $siswa->generateNis();\n                     }\n \n-                    // ### PERBAIKAN ###: Logika dinamis untuk menentukan tahun invoice\n                     foreach ($months as $monthName => $monthNumber) {\n                         if (isset($data[$monthName]) && !empty($data[$monthName])) {\n-                            \n-                            // Tentukan tahun yang benar untuk invoice\n-                            // Jika bulan invoice lebih kecil dari bulan daftar, berarti itu tahun depannya.\n-                            // Contoh: Daftar Sep 2024, bayar Jan -> Jan 2025\n-                            $invoiceYear = ($monthNumber < $tanggalBergabung->month) \n-                                ? $tanggalBergabung->year + 1 \n+                            $invoiceYear = ($monthNumber < $tanggalBergabung->month && $tanggalBergabung->year == 2024) \n+                                ? 2025 \n                                 : $tanggalBergabung->year;\n \n                             $periodeTagihan = Carbon::create($invoiceYear, $monthNumber, 1)->startOfMonth();\n                             \n@@ -125,10 +111,10 @@\n                                     'periode_tagihan' => $periodeTagihan,\n                                 ],\n                                 [\n                                     'description' => \"SPP {$periodeTagihan->isoFormat('MMMM YYYY')} - {$siswa->nama_siswa}\",\n-                                    'amount' => (int) filter_var($data[$monthName], FILTER_SANITIZE_NUMBER_INT),\n-                                    'total_amount' => (int) filter_var($data[$monthName], FILTER_SANITIZE_NUMBER_INT),\n+                                    'amount' => (int) $data[$monthName],\n+                                    'total_amount' => (int) $data[$monthName],\n                                     'admin_fee' => 0,\n                                     'status' => 'PAID',\n                                     'paid_at' => $periodeTagihan->copy()->endOfMonth(),\n                                     'due_date' => $periodeTagihan->copy()->endOfMonth(),\n@@ -137,10 +123,10 @@\n                         }\n                     }\n                 });\n             } catch (Throwable $e) {\n-                $this->error(\"\\n Gagal memproses baris untuk siswa: \" . ($data['NAMA MURID'] ?? 'N/A') . \". Error: \" . $e->getMessage());\n-                Log::error(\"Import Gagal: \" . ($data['NAMA MURID'] ?? 'N/A'), ['error' => $e->getMessage()]);\n+                $this->error(\"\\n Gagal memproses baris untuk siswa: \" . ($data['nama_murid'] ?? 'N/A') . \". Error: \" . $e->getMessage());\n+                Log::error(\"Import Gagal: \" . ($data['nama_murid'] ?? 'N/A'), ['error' => $e->getMessage()]);\n             }\n             \n             $progressBar->advance();\n         }\n"
                },
                {
                    "date": 1754236983999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,44 +17,54 @@\n      * The name and signature of the console command.\n      *\n      * @var string\n      */\n-    protected $signature = 'import:legacy-data {--path=data_lama.csv : The path to the CSV file inside storage/app directory.}';\n+    protected $signature = 'import:legacy-data \n+                            {--path=data_lama.csv : The path to the CSV file inside storage/app directory.}\n+                            {--rollback : Batalkan impor dan hapus data yang telah dibuat.}';\n \n     /**\n      * The console command description.\n      *\n      * @var string\n      */\n-    protected $description = 'Import data siswa dan invoice historis dari file CSV.';\n+    protected $description = 'Import atau batalkan impor data siswa dan invoice historis dari file CSV.';\n \n     /**\n      * Execute the console command.\n      */\n     public function handle()\n     {\n-        $this->info('Memulai proses impor data lama...');\n+        if ($this->option('rollback')) {\n+            if ($this->confirm('Anda yakin ingin membatalkan impor? Ini akan menghapus siswa dan invoice terkait dari file CSV. Tindakan ini tidak dapat diurungkan.')) {\n+                $this->rollbackImport();\n+            } else {\n+                $this->info('Operasi rollback dibatalkan.');\n+            }\n+            return 0;\n+        }\n \n-        $filePath = storage_path('app/' . $this->option('path'));\n+        $this->executeImport();\n+        return 0;\n+    }\n \n-        if (!file_exists($filePath)) {\n-            $this->error(\"File tidak ditemukan di: {$filePath}\");\n-            return 1;\n-        }\n+    /**\n+     * Menjalankan proses impor data.\n+     */\n+    protected function executeImport()\n+    {\n+        $this->info('Memulai proses impor data lama...');\n+        $filePath = $this->getFilePath();\n+        if (!$filePath) return 1;\n \n         $file = fopen($filePath, 'r');\n-        $header = fgetcsv($file); // Baca baris pertama sebagai header\n+        $header = fgetcsv($file);\n \n-        $months = [\n-            'januari' => 1, 'februari' => 2, 'maret' => 3, 'april' => 4, 'mei' => 5, 'juni' => 6,\n-            'juli' => 7, 'agustus' => 8, 'september' => 9, 'oktober' => 10, 'november' => 11, 'desember' => 12,\n-        ];\n-        \n+        $months = $this->getMonthsMapping();\n         $totalRows = count(file($filePath)) - 1;\n         $progressBar = $this->output->createProgressBar($totalRows);\n \n         $this->info(\"Membaca {$totalRows} baris data siswa...\");\n-        \n         $progressBar->start();\n \n         while (($row = fgetcsv($file)) !== false) {\n             if (empty(array_filter($row))) {\n@@ -66,11 +76,9 @@\n \n             try {\n                 DB::transaction(function () use ($data, $months) {\n                     $sppDefault = (int) $data['spp'];\n-                    if ($sppDefault <= 0) {\n-                        return;\n-                    }\n+                    if ($sppDefault <= 0) return;\n \n                     $kelas = Kelas::firstOrCreate(\n                         ['nama_kelas' => trim($data['cabang'])],\n                         ['biaya_spp_default' => $sppDefault]\n@@ -78,48 +86,22 @@\n \n                     $tanggalBergabung = !empty(trim($data['tgl_daftar'])) ? new Carbon($data['tgl_daftar']) : now();\n \n                     $siswa = Siswa::updateOrCreate(\n-                        [\n-                            'nama_siswa' => trim($data['nama_murid']),\n-                            'nomor_telepon_wali' => trim($data['no_telp']),\n-                        ],\n-                        [\n-                            'id_kelas' => $kelas->id_kelas,\n-                            'status_siswa' => 'Aktif',\n-                            'tanggal_bergabung' => $tanggalBergabung->startOfDay(),\n-                            'jumlah_spp_custom' => $sppDefault,\n-                            'id_user' => null,\n-                        ]\n+                        ['nama_siswa' => trim($data['nama_murid']), 'nomor_telepon_wali' => trim($data['no_telp'])],\n+                        ['id_kelas' => $kelas->id_kelas, 'status_siswa' => 'Aktif', 'tanggal_bergabung' => $tanggalBergabung->startOfDay(), 'jumlah_spp_custom' => $sppDefault, 'id_user' => null]\n                     );\n \n-                    if (!$siswa->nis) {\n-                        $siswa->generateNis();\n-                    }\n+                    if (!$siswa->nis) $siswa->generateNis();\n \n                     foreach ($months as $monthName => $monthNumber) {\n                         if (isset($data[$monthName]) && !empty($data[$monthName])) {\n-                            $invoiceYear = ($monthNumber < $tanggalBergabung->month && $tanggalBergabung->year == 2024) \n-                                ? 2025 \n-                                : $tanggalBergabung->year;\n-\n+                            $invoiceYear = ($monthNumber < $tanggalBergabung->month && $tanggalBergabung->year == 2024) ? 2025 : $tanggalBergabung->year;\n                             $periodeTagihan = Carbon::create($invoiceYear, $monthNumber, 1)->startOfMonth();\n                             \n                             Invoice::updateOrCreate(\n-                                [\n-                                    'id_siswa' => $siswa->id_siswa,\n-                                    'type' => 'spp',\n-                                    'periode_tagihan' => $periodeTagihan,\n-                                ],\n-                                [\n-                                    'description' => \"SPP {$periodeTagihan->isoFormat('MMMM YYYY')} - {$siswa->nama_siswa}\",\n-                                    'amount' => (int) $data[$monthName],\n-                                    'total_amount' => (int) $data[$monthName],\n-                                    'admin_fee' => 0,\n-                                    'status' => 'PAID',\n-                                    'paid_at' => $periodeTagihan->copy()->endOfMonth(),\n-                                    'due_date' => $periodeTagihan->copy()->endOfMonth(),\n-                                ]\n+                                ['id_siswa' => $siswa->id_siswa, 'type' => 'spp', 'periode_tagihan' => $periodeTagihan],\n+                                ['description' => \"SPP {$periodeTagihan->isoFormat('MMMM YYYY')} - {$siswa->nama_siswa}\", 'amount' => (int) $data[$monthName], 'total_amount' => (int) $data[$monthName], 'admin_fee' => 0, 'status' => 'PAID', 'paid_at' => $periodeTagihan->copy()->endOfMonth(), 'due_date' => $periodeTagihan->copy()->endOfMonth()]\n                             );\n                         }\n                     }\n                 });\n@@ -133,7 +115,81 @@\n \n         $progressBar->finish();\n         fclose($file);\n         $this->info(\"\\n\\nProses impor data lama telah selesai.\");\n-        return 0;\n     }\n+\n+    /**\n+     * Menjalankan proses rollback (membatalkan impor).\n+     */\n+    protected function rollbackImport()\n+    {\n+        $this->info('Memulai proses rollback impor...');\n+        $filePath = $this->getFilePath();\n+        if (!$filePath) return 1;\n+\n+        $file = fopen($filePath, 'r');\n+        $header = fgetcsv($file);\n+\n+        $totalRows = count(file($filePath)) - 1;\n+        $progressBar = $this->output->createProgressBar($totalRows);\n+\n+        $this->info(\"Membaca {$totalRows} baris data untuk dihapus...\");\n+        $progressBar->start();\n+\n+        while (($row = fgetcsv($file)) !== false) {\n+            if (empty(array_filter($row))) {\n+                $progressBar->advance();\n+                continue;\n+            }\n+\n+            $data = array_combine($header, $row);\n+\n+            try {\n+                // Cari siswa berdasarkan data unik dari CSV\n+                $siswa = Siswa::where('nama_siswa', trim($data['nama_murid']))\n+                              ->where('nomor_telepon_wali', trim($data['no_telp']))\n+                              ->first();\n+\n+                if ($siswa) {\n+                    // Hapus hanya invoice SPP yang PAID (sesuai dengan yang diimpor)\n+                    $siswa->invoices()->where('type', 'spp')->where('status', 'PAID')->delete();\n+                    // Hapus siswa itu sendiri\n+                    $siswa->delete();\n+                }\n+            } catch (Throwable $e) {\n+                $this->error(\"\\n Gagal memproses rollback untuk siswa: \" . ($data['nama_murid'] ?? 'N/A') . \". Error: \" . $e->getMessage());\n+                Log::error(\"Rollback Gagal: \" . ($data['nama_murid'] ?? 'N/A'), ['error' => $e->getMessage()]);\n+            }\n+\n+            $progressBar->advance();\n+        }\n+\n+        $progressBar->finish();\n+        fclose($file);\n+        $this->info(\"\\n\\nProses rollback telah selesai.\");\n+    }\n+\n+    /**\n+     * Mendapatkan path file CSV dan memvalidasinya.\n+     */\n+    private function getFilePath(): ?string\n+    {\n+        $filePath = storage_path('app/' . $this->option('path'));\n+        if (!file_exists($filePath)) {\n+            $this->error(\"File tidak ditemukan di: {$filePath}\");\n+            return null;\n+        }\n+        return $filePath;\n+    }\n+\n+    /**\n+     * Mendapatkan mapping bulan.\n+     */\n+    private function getMonthsMapping(): array\n+    {\n+        return [\n+            'januari' => 1, 'februari' => 2, 'maret' => 3, 'april' => 4, 'mei' => 5, 'juni' => 6,\n+            'juli' => 7, 'agustus' => 8, 'september' => 9, 'oktober' => 10, 'november' => 11, 'desember' => 12,\n+        ];\n+    }\n }\n"
                },
                {
                    "date": 1754237294022,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,10 +85,13 @@\n                     );\n \n                     $tanggalBergabung = !empty(trim($data['tgl_daftar'])) ? new Carbon($data['tgl_daftar']) : now();\n \n+                    // ### PERBAIKAN 1: Mengubah nama siswa menjadi proper case ###\n+                    $properCaseName = ucwords(strtolower(trim($data['nama_murid'])));\n+\n                     $siswa = Siswa::updateOrCreate(\n-                        ['nama_siswa' => trim($data['nama_murid']), 'nomor_telepon_wali' => trim($data['no_telp'])],\n+                        ['nama_siswa' => $properCaseName, 'nomor_telepon_wali' => trim($data['no_telp'])],\n                         ['id_kelas' => $kelas->id_kelas, 'status_siswa' => 'Aktif', 'tanggal_bergabung' => $tanggalBergabung->startOfDay(), 'jumlah_spp_custom' => $sppDefault, 'id_user' => null]\n                     );\n \n                     if (!$siswa->nis) $siswa->generateNis();\n@@ -97,11 +100,20 @@\n                         if (isset($data[$monthName]) && !empty($data[$monthName])) {\n                             $invoiceYear = ($monthNumber < $tanggalBergabung->month && $tanggalBergabung->year == 2024) ? 2025 : $tanggalBergabung->year;\n                             $periodeTagihan = Carbon::create($invoiceYear, $monthNumber, 1)->startOfMonth();\n                             \n+                            // ### PERBAIKAN 2: Mengubah status invoice menjadi PENDING ###\n                             Invoice::updateOrCreate(\n                                 ['id_siswa' => $siswa->id_siswa, 'type' => 'spp', 'periode_tagihan' => $periodeTagihan],\n-                                ['description' => \"SPP {$periodeTagihan->isoFormat('MMMM YYYY')} - {$siswa->nama_siswa}\", 'amount' => (int) $data[$monthName], 'total_amount' => (int) $data[$monthName], 'admin_fee' => 0, 'status' => 'PAID', 'paid_at' => $periodeTagihan->copy()->endOfMonth(), 'due_date' => $periodeTagihan->copy()->endOfMonth()]\n+                                [\n+                                    'description' => \"SPP {$periodeTagihan->isoFormat('MMMM YYYY')} - {$siswa->nama_siswa}\", \n+                                    'amount' => (int) $data[$monthName], \n+                                    'total_amount' => (int) $data[$monthName], \n+                                    'admin_fee' => 0, \n+                                    'status' => 'PENDING', // <-- Diubah dari PAID\n+                                    'paid_at' => null, // <-- Dikosongkan\n+                                    'due_date' => $periodeTagihan->copy()->endOfMonth()\n+                                ]\n                             );\n                         }\n                     }\n                 });\n@@ -144,17 +156,17 @@\n \n             $data = array_combine($header, $row);\n \n             try {\n-                // Cari siswa berdasarkan data unik dari CSV\n-                $siswa = Siswa::where('nama_siswa', trim($data['nama_murid']))\n+                // Cari siswa berdasarkan nama yang sudah diubah ke proper case\n+                $properCaseName = ucwords(strtolower(trim($data['nama_murid'])));\n+                $siswa = Siswa::where('nama_siswa', $properCaseName)\n                               ->where('nomor_telepon_wali', trim($data['no_telp']))\n                               ->first();\n \n                 if ($siswa) {\n-                    // Hapus hanya invoice SPP yang PAID (sesuai dengan yang diimpor)\n-                    $siswa->invoices()->where('type', 'spp')->where('status', 'PAID')->delete();\n-                    // Hapus siswa itu sendiri\n+                    // ### PERBAIKAN 3: Menghapus invoice PENDING ###\n+                    $siswa->invoices()->where('type', 'spp')->where('status', 'PENDING')->delete();\n                     $siswa->delete();\n                 }\n             } catch (Throwable $e) {\n                 $this->error(\"\\n Gagal memproses rollback untuk siswa: \" . ($data['nama_murid'] ?? 'N/A') . \". Error: \" . $e->getMessage());\n"
                },
                {
                    "date": 1754237430230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n      */\n     public function handle()\n     {\n         if ($this->option('rollback')) {\n-            if ($this->confirm('Anda yakin ingin membatalkan impor? Ini akan menghapus siswa dan invoice terkait dari file CSV. Tindakan ini tidak dapat diurungkan.')) {\n+            if ($this->confirm('Anda yakin ingin membatalkan impor? Ini akan MENGHAPUS PERMANEN siswa dan invoice terkait dari file CSV. Tindakan ini tidak dapat diurungkan.')) {\n                 $this->rollbackImport();\n             } else {\n                 $this->info('Operasi rollback dibatalkan.');\n             }\n@@ -85,9 +85,8 @@\n                     );\n \n                     $tanggalBergabung = !empty(trim($data['tgl_daftar'])) ? new Carbon($data['tgl_daftar']) : now();\n \n-                    // ### PERBAIKAN 1: Mengubah nama siswa menjadi proper case ###\n                     $properCaseName = ucwords(strtolower(trim($data['nama_murid'])));\n \n                     $siswa = Siswa::updateOrCreate(\n                         ['nama_siswa' => $properCaseName, 'nomor_telepon_wali' => trim($data['no_telp'])],\n@@ -100,18 +99,17 @@\n                         if (isset($data[$monthName]) && !empty($data[$monthName])) {\n                             $invoiceYear = ($monthNumber < $tanggalBergabung->month && $tanggalBergabung->year == 2024) ? 2025 : $tanggalBergabung->year;\n                             $periodeTagihan = Carbon::create($invoiceYear, $monthNumber, 1)->startOfMonth();\n                             \n-                            // ### PERBAIKAN 2: Mengubah status invoice menjadi PENDING ###\n                             Invoice::updateOrCreate(\n                                 ['id_siswa' => $siswa->id_siswa, 'type' => 'spp', 'periode_tagihan' => $periodeTagihan],\n                                 [\n                                     'description' => \"SPP {$periodeTagihan->isoFormat('MMMM YYYY')} - {$siswa->nama_siswa}\", \n                                     'amount' => (int) $data[$monthName], \n                                     'total_amount' => (int) $data[$monthName], \n                                     'admin_fee' => 0, \n-                                    'status' => 'PENDING', // <-- Diubah dari PAID\n-                                    'paid_at' => null, // <-- Dikosongkan\n+                                    'status' => 'PENDING',\n+                                    'paid_at' => null,\n                                     'due_date' => $periodeTagihan->copy()->endOfMonth()\n                                 ]\n                             );\n                         }\n@@ -156,18 +154,17 @@\n \n             $data = array_combine($header, $row);\n \n             try {\n-                // Cari siswa berdasarkan nama yang sudah diubah ke proper case\n                 $properCaseName = ucwords(strtolower(trim($data['nama_murid'])));\n                 $siswa = Siswa::where('nama_siswa', $properCaseName)\n                               ->where('nomor_telepon_wali', trim($data['no_telp']))\n                               ->first();\n \n                 if ($siswa) {\n-                    // ### PERBAIKAN 3: Menghapus invoice PENDING ###\n-                    $siswa->invoices()->where('type', 'spp')->where('status', 'PENDING')->delete();\n-                    $siswa->delete();\n+                    // ### PERBAIKAN: Menggunakan forceDelete() untuk penghapusan permanen ###\n+                    $siswa->invoices()->where('type', 'spp')->where('status', 'PENDING')->forceDelete();\n+                    $siswa->forceDelete();\n                 }\n             } catch (Throwable $e) {\n                 $this->error(\"\\n Gagal memproses rollback untuk siswa: \" . ($data['nama_murid'] ?? 'N/A') . \". Error: \" . $e->getMessage());\n                 Log::error(\"Rollback Gagal: \" . ($data['nama_murid'] ?? 'N/A'), ['error' => $e->getMessage()]);\n"
                }
            ],
            "date": 1754210515147,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Console\\Commands;\n\nuse App\\Models\\Invoice;\nuse App\\Models\\Kelas;\nuse App\\Models\\Siswa;\nuse Carbon\\Carbon;\nuse Illuminate\\Console\\Command;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Log;\nuse Throwable;\n\nclass ImportLegacyData extends Command\n{\n    /**\n     * The name and signature of the console command.\n     *\n     * @var string\n     */\n    protected $signature = 'import:legacy-data {--path=data_lama.csv : The path to the CSV file inside storage/app directory.}';\n\n    /**\n     * The console command description.\n     *\n     * @var string\n     */\n    protected $description = 'Import data siswa dan invoice historis dari file CSV.';\n\n    /**\n     * Execute the console command.\n     */\n    public function handle()\n    {\n        $this->info('Memulai proses impor data lama...');\n\n        $filePath = storage_path('app/' . $this->option('path'));\n\n        if (!file_exists($filePath)) {\n            $this->error(\"File tidak ditemukan di: {$filePath}\");\n            return 1;\n        }\n\n        $file = fopen($filePath, 'r');\n        $header = fgetcsv($file); // Baca baris pertama sebagai header\n\n        // Mapping nama bulan ke nomor bulan\n        $months = [\n            'JANUARI' => 1, 'FEBRUARI' => 2, 'MARET' => 3, 'APRIL' => 4, 'MEI' => 5, 'JUNI' => 6,\n            'JULI' => 7, 'AGUSTUS' => 8, 'SEPTEMBER' => 9, 'OKTOBER' => 10, 'NOVEMBER' => 11, 'DESEMBER' => 12,\n        ];\n        \n        // Asumsi tahun untuk invoice yang sudah berjalan adalah 2024, berdasarkan TGL DAFTAR\n        $invoiceYear = 2024;\n\n        // Hitung total baris untuk progress bar\n        $totalRows = count(file($filePath)) - 1;\n        $progressBar = $this->output->createProgressBar($totalRows);\n\n        $this->info(\"Membaca {$totalRows} baris data siswa...\");\n        $progressBar->start();\n\n        while (($row = fgetcsv($file)) !== false) {\n            $data = array_combine($header, $row);\n\n            try {\n                DB::transaction(function () use ($data, $months, $invoiceYear) {\n                    // 1. Cari atau buat Kelas (Cabang)\n                    $kelas = Kelas::firstOrCreate(\n                        ['nama_kelas' => trim($data['Cabang'])],\n                        ['biaya_spp_default' => (int) filter_var($data['SPP'], FILTER_SANITIZE_NUMBER_INT)]\n                    );\n\n                    // 2. Buat atau perbarui data Siswa (tanpa User)\n                    // Menggunakan nama dan nama wali sebagai kunci unik untuk mencegah duplikat\n                    $siswa = Siswa::updateOrCreate(\n                        [\n                            'nama_siswa' => trim($data['NAMA MURID']),\n                            'nomor_telepon_wali' => trim($data['No. Telp']),\n                        ],\n                        [\n                            'id_kelas' => $kelas->id_kelas,\n                            'status_siswa' => 'Aktif',\n                            'tanggal_bergabung' => Carbon::createFromFormat('d-M-y', $data['TGL DAFTAR'])->startOfDay(),\n                            'jumlah_spp_custom' => (int) filter_var($data['SPP'], FILTER_SANITIZE_NUMBER_INT),\n                            'id_user' => null, // id_user sengaja dikosongkan\n                        ]\n                    );\n\n                    // Generate NIS jika belum ada\n                    if (!$siswa->nis) {\n                        $siswa->generateNis();\n                    }\n\n                    // 3. Buat Invoice untuk setiap bulan yang sudah dibayar\n                    foreach ($months as $monthName => $monthNumber) {\n                        if (isset($data[$monthName]) && !empty($data[$monthName])) {\n                            $periodeTagihan = Carbon::create($invoiceYear, $monthNumber, 1)->startOfMonth();\n                            \n                            Invoice::updateOrCreate(\n                                [\n                                    'id_siswa' => $siswa->id_siswa,\n                                    'type' => 'spp',\n                                    'periode_tagihan' => $periodeTagihan,\n                                ],\n                                [\n                                    'description' => \"SPP {$periodeTagihan->isoFormat('MMMM YYYY')} - {$siswa->nama_siswa}\",\n                                    'amount' => (int) filter_var($data[$monthName], FILTER_SANITIZE_NUMBER_INT),\n                                    'total_amount' => (int) filter_var($data[$monthName], FILTER_SANITIZE_NUMBER_INT),\n                                    'admin_fee' => 0,\n                                    'status' => 'PAID', // Langsung set sebagai LUNAS\n                                    'paid_at' => $periodeTagihan->copy()->endOfMonth(), // Asumsikan dibayar di akhir bulan\n                                    'due_date' => $periodeTagihan->copy()->endOfMonth(),\n                                ]\n                            );\n                        }\n                    }\n                });\n            } catch (Throwable $e) {\n                $this->error(\"\\n Gagal memproses baris untuk siswa: \" . $data['NAMA MURID'] . \". Error: \" . $e->getMessage());\n                Log::error(\"Import Gagal: \" . $data['NAMA MURID'], ['error' => $e->getMessage()]);\n            }\n            \n            $progressBar->advance();\n        }\n\n        $progressBar->finish();\n        fclose($file);\n        $this->info(\"\\n\\nProses impor data lama telah selesai.\");\n        return 0;\n    }\n}\n"
        }
    ]
}