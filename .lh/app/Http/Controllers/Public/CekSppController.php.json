{
    "sourceFile": "app/Http/Controllers/Public/CekSppController.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1754378618897,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1754379282796,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n      * Menampilkan form awal untuk input nomor telepon.\n      */\n     public function showForm(): Response\n     {\n-        // Bersihkan session pencarian sebelumnya untuk memulai dari awal\n+        // Bersihkan session pencarian sebelumnya\n         session()->forget('search_phone_number');\n \n         return Inertia::render('Public/CekSpp', [\n             'pageTitle' => 'Cek SPP Siswa',\n"
                },
                {
                    "date": 1754380394248,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,25 +1,30 @@\n <?php\n \n namespace App\\Http\\Controllers\\Public;\n \n+use App\\Exceptions\\InsufficientSppDataException;\n use App\\Http\\Controllers\\Controller;\n+use App\\Models\\Invoice;\n use App\\Models\\Siswa;\n+use App\\Services\\XenditService;\n+use Carbon\\Carbon;\n use Illuminate\\Http\\Request;\n+use Illuminate\\Support\\Facades\\DB;\n+use Illuminate\\Support\\Facades\\Log;\n use Illuminate\\Support\\Facades\\Redirect;\n+use Illuminate\\Support\\Str;\n use Inertia\\Inertia;\n use Inertia\\Response;\n+use Throwable;\n \n class CekSppController extends Controller\n {\n     /**\n      * Menampilkan form awal untuk input nomor telepon.\n      */\n     public function showForm(): Response\n     {\n-        // Bersihkan session pencarian sebelumnya\n-        session()->forget('search_phone_number');\n-\n         return Inertia::render('Public/CekSpp', [\n             'pageTitle' => 'Cek SPP Siswa',\n         ]);\n     }\n@@ -48,11 +53,8 @@\n         if ($siswas->isEmpty()) {\n             return Redirect::back()->withErrors(['lookup' => 'Nomor telepon tidak terdaftar. Pastikan nomor yang Anda masukkan sudah benar.']);\n         }\n \n-        // Simpan nomor telepon ke session untuk ditampilkan kembali di form\n-        session(['search_phone_number' => $phoneInput]);\n-\n         // Kirim daftar siswa yang ditemukan ke halaman yang sama\n         return Inertia::render('Public/CekSpp', [\n             'pageTitle' => 'Pilih Siswa',\n             'foundSiswa' => $siswas->map(fn($siswa) => [\n@@ -68,25 +70,16 @@\n      * Menampilkan halaman tagihan lengkap untuk siswa yang dipilih.\n      */\n     public function showTagihan(Siswa $siswa)\n     {\n-        $siswa->load('user'); // Load relasi user jika ada\n+        $siswa->load('user');\n \n-        $pendingSppInvoices = $siswa->invoices()\n-                               ->where('type', 'spp')\n-                               ->where('status', 'PENDING')\n-                               ->orderBy('periode_tagihan', 'asc')\n-                               ->get();\n+        $pendingSppInvoices = $siswa->invoices()->where('type', 'spp')->where('status', 'PENDING')->orderBy('periode_tagihan', 'asc')->get();\n+        $lastPaidInvoice = $siswa->invoices()->where('type', 'spp')->where('status', 'PAID')->orderBy('periode_tagihan', 'desc')->first();\n \n-        $lastPaidInvoice = $siswa->invoices()\n-                                ->where('type', 'spp')\n-                                ->where('status', 'PAID')\n-                                ->orderBy('periode_tagihan', 'desc')\n-                                ->first();\n-\n         return Inertia::render('Public/CekSpp', [\n             'pageTitle' => 'Tagihan SPP',\n-            'selectedSiswa' => [ // Kirim data siswa yang sudah terpilih\n+            'selectedSiswa' => [\n                 'id_siswa' => $siswa->id_siswa,\n                 'nama_siswa' => $siswa->nama_siswa,\n                 'nis' => $siswa->nis,\n                 'jumlah_spp_custom' => (float) $siswa->jumlah_spp_custom,\n@@ -106,5 +99,91 @@\n             }),\n             'lastPaidPeriod' => $lastPaidInvoice ? $lastPaidInvoice->periode_tagihan->format('Y-m-d') : null,\n         ]);\n     }\n+\n+    /**\n+     * Membuat pembayaran gabungan untuk alur Cek SPP.\n+     */\n+    public function createSppPayment(Request $request, Siswa $siswa, XenditService $xenditService)\n+    {\n+        $validated = $request->validate([\n+            'periods' => 'required|array|min:1',\n+            'periods.*' => 'required|date_format:Y-m-d',\n+        ]);\n+\n+        $periods = collect($validated['periods'])->sort()->values();\n+\n+        try {\n+            $parentInvoice = DB::transaction(function () use ($periods, $siswa, $xenditService, $request) {\n+                \n+                $oldParentInvoices = Invoice::where('id_siswa', $siswa->id_siswa)\n+                    ->where('type', 'pembayaran_spp_gabungan')\n+                    ->where('status', 'PENDING')\n+                    ->get();\n+\n+                foreach ($oldParentInvoices as $oldParent) {\n+                    if ($oldParent->xendit_invoice_id) {\n+                        $xenditService->expireInvoice($oldParent->xendit_invoice_id);\n+                    }\n+                    $oldParent->delete();\n+                }\n+\n+                $totalSpp = 0;\n+                $existingInvoices = $siswa->invoices()->whereIn('periode_tagihan', $periods->toArray())->where('type', 'spp')->get();\n+                $totalSpp += $existingInvoices->sum('total_amount');\n+                $existingPeriods = $existingInvoices->pluck('periode_tagihan')->map(fn($p) => $p->format('Y-m-d'));\n+                $projectedPeriods = $periods->diff($existingPeriods);\n+\n+                if ($projectedPeriods->isNotEmpty()) {\n+                    $sppPerBulan = (float)($siswa->jumlah_spp_custom ?? 0);\n+                    if ($sppPerBulan <= 0) throw new InsufficientSppDataException('Data nominal SPP belum diatur.');\n+                    $totalSpp += $projectedPeriods->count() * $sppPerBulan;\n+                }\n+\n+                $adminFee = (float)($siswa->admin_fee_custom ?? 0);\n+                $totalAmount = $totalSpp + $adminFee;\n+\n+                if ($totalAmount <= 0) throw new \\Exception(\"Total tagihan tidak valid (Rp 0).\");\n+\n+                Carbon::setLocale('id');\n+                $startPeriod = Carbon::parse($periods->first());\n+                $endPeriod = Carbon::parse($periods->last());\n+                $description = \"Pembayaran SPP Gabungan ({$periods->count()} Bulan: {$startPeriod->isoFormat('MMMM YYYY')} - {$endPeriod->isoFormat('MMMM YYYY')}) - {$siswa->nama_siswa} (NIS: {$siswa->nis})\";\n+\n+                $parentInvoice = Invoice::create([\n+                    'id_siswa' => $siswa->id_siswa,\n+                    'user_id' => $siswa->user?->id,\n+                    'type' => 'pembayaran_spp_gabungan',\n+                    'description' => $description,\n+                    'periode_tagihan' => $startPeriod,\n+                    'amount' => $totalSpp,\n+                    'admin_fee' => $adminFee,\n+                    'total_amount' => $totalAmount,\n+                    'due_date' => now()->addDay(),\n+                    'status' => 'PENDING',\n+                    'external_id_xendit' => 'UNIF-'.$siswa->id_siswa.'-'.strtoupper(Str::random(10)),\n+                ]);\n+\n+                $payerInfo = ['email' => $siswa->user?->email, 'name' => $siswa->nama_siswa, 'phone' => $siswa->nomor_telepon_wali];\n+                \n+                $xenditInvoiceData = $xenditService->createInvoice($totalSpp, $adminFee, $parentInvoice->description, $payerInfo, $parentInvoice->external_id_xendit, route('payment.success'), route('payment.failure'), now()->addDay());\n+\n+                if (!$xenditInvoiceData || !isset($xenditInvoiceData['invoice_url'])) {\n+                    throw new \\Exception('Gagal membuat link pembayaran gabungan di Xendit.');\n+                }\n+                \n+                $parentInvoice->update(['xendit_invoice_id' => $xenditInvoiceData['id'], 'xendit_payment_url' => $xenditInvoiceData['invoice_url']]);\n+\n+                return $parentInvoice;\n+            });\n+\n+            return Inertia::location($parentInvoice->xendit_payment_url);\n+\n+        } catch (InsufficientSppDataException $e) {\n+            return back()->withErrors(['error' => $e->getMessage()]);\n+        } catch (Throwable $e) {\n+            Log::error('Gagal membuat pembayaran publik: ' . $e->getMessage());\n+            return back()->withErrors(['error' => 'Terjadi kesalahan sistem, silakan coba lagi nanti.']);\n+        }\n+    }\n }\n"
                },
                {
                    "date": 1754382731630,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,21 +18,16 @@\n use Throwable;\n \n class CekSppController extends Controller\n {\n-    /**\n-     * Menampilkan form awal untuk input nomor telepon.\n-     */\n+    // ... (fungsi showForm, findSiswaByPhone, showTagihan tetap sama) ...\n     public function showForm(): Response\n     {\n         return Inertia::render('Public/CekSpp', [\n             'pageTitle' => 'Cek SPP Siswa',\n         ]);\n     }\n \n-    /**\n-     * Mencari semua siswa berdasarkan nomor telepon dan menampilkan daftar pilihan.\n-     */\n     public function findSiswaByPhone(Request $request)\n     {\n         $validated = $request->validate([\n             'nomor_telepon_wali' => 'required|string',\n@@ -53,9 +48,8 @@\n         if ($siswas->isEmpty()) {\n             return Redirect::back()->withErrors(['lookup' => 'Nomor telepon tidak terdaftar. Pastikan nomor yang Anda masukkan sudah benar.']);\n         }\n \n-        // Kirim daftar siswa yang ditemukan ke halaman yang sama\n         return Inertia::render('Public/CekSpp', [\n             'pageTitle' => 'Pilih Siswa',\n             'foundSiswa' => $siswas->map(fn($siswa) => [\n                 'id_siswa' => $siswa->id_siswa,\n@@ -65,11 +59,8 @@\n             'searchedPhone' => $phoneInput,\n         ]);\n     }\n \n-    /**\n-     * Menampilkan halaman tagihan lengkap untuk siswa yang dipilih.\n-     */\n     public function showTagihan(Siswa $siswa)\n     {\n         $siswa->load('user');\n \n@@ -165,10 +156,13 @@\n                 ]);\n \n                 $payerInfo = ['email' => $siswa->user?->email, 'name' => $siswa->nama_siswa, 'phone' => $siswa->nomor_telepon_wali];\n                 \n-                $xenditInvoiceData = $xenditService->createInvoice($totalSpp, $adminFee, $parentInvoice->description, $payerInfo, $parentInvoice->external_id_xendit, route('payment.success'), route('payment.failure'), now()->addDay());\n+                // ### PERBAIKAN ###: Menggunakan route sukses yang baru\n+                $successUrl = route('tagihan.spp.success', ['siswa' => $siswa->id_siswa]);\n \n+                $xenditInvoiceData = $xenditService->createInvoice($totalSpp, $adminFee, $parentInvoice->description, $payerInfo, $parentInvoice->external_id_xendit, $successUrl, route('payment.failure'), now()->addDay());\n+\n                 if (!$xenditInvoiceData || !isset($xenditInvoiceData['invoice_url'])) {\n                     throw new \\Exception('Gagal membuat link pembayaran gabungan di Xendit.');\n                 }\n                 \n@@ -185,5 +179,16 @@\n             Log::error('Gagal membuat pembayaran publik: ' . $e->getMessage());\n             return back()->withErrors(['error' => 'Terjadi kesalahan sistem, silakan coba lagi nanti.']);\n         }\n     }\n+\n+    /**\n+     * ### FUNGSI BARU: Menampilkan halaman sukses untuk pembayaran SPP ###\n+     */\n+    public function showSuccess(Siswa $siswa): Response\n+    {\n+        return Inertia::render('Public/SppSuccess', [\n+            'pageTitle' => 'Pembayaran Berhasil',\n+            'siswaName' => $siswa->nama_siswa,\n+        ]);\n+    }\n }\n"
                },
                {
                    "date": 1754386790555,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,8 +91,49 @@\n             'lastPaidPeriod' => $lastPaidInvoice ? $lastPaidInvoice->periode_tagihan->format('Y-m-d') : null,\n         ]);\n     }\n \n+    public function createUserAndLink(Request $request, Siswa $siswa)\n+    {\n+        if ($siswa->user()->exists()) {\n+            return Redirect::back()->withErrors(['form' => 'Siswa ini sudah memiliki akun.']);\n+        }\n+\n+        $validated = $request->validate([\n+            'name' => 'required|string|max:255',\n+            'email' => 'required|string|email|max:255|unique:users',\n+            'password' => ['required', 'confirmed', Rules\\Password::defaults()],\n+        ]);\n+\n+        $user = User::create([\n+            'name' => $validated['name'],\n+            'email' => $validated['email'],\n+            'password' => Hash::make($validated['password']),\n+        ]);\n+        \n+        $siswa->update(['id_user' => $user->id]);\n+        $user->assignRole('siswa');\n+\n+        $dataForEmail = [\n+            'nama_wali' => $user->name,\n+            'nama_siswa' => $siswa->nama_siswa,\n+            'nis' => $siswa->nis,\n+            'login_url' => route('login'),\n+            'email_wali' => $user->email,\n+        ];\n+\n+        try {\n+            Mail::to($user->email)->send(new RegistrationSuccess($dataForEmail));\n+        } catch (\\Exception $e) {\n+            Log::error('Gagal mengirim email pendaftaran: ' . $e->getMessage());\n+        }\n+\n+        return Redirect::route('tagihan.spp.show', $siswa->id_siswa)->with('flash', [\n+            'type' => 'success',\n+            'message' => 'Akun berhasil dibuat! Anda sekarang bisa login melalui halaman utama.'\n+        ]);\n+    }\n+\n     /**\n      * Membuat pembayaran gabungan untuk alur Cek SPP.\n      */\n     public function createSppPayment(Request $request, Siswa $siswa, XenditService $xenditService)\n"
                }
            ],
            "date": 1754378618897,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Http\\Controllers\\Public;\n\nuse App\\Http\\Controllers\\Controller;\nuse App\\Models\\Siswa;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Inertia\\Inertia;\nuse Inertia\\Response;\n\nclass CekSppController extends Controller\n{\n    /**\n     * Menampilkan form awal untuk input nomor telepon.\n     */\n    public function showForm(): Response\n    {\n        // Bersihkan session pencarian sebelumnya untuk memulai dari awal\n        session()->forget('search_phone_number');\n\n        return Inertia::render('Public/CekSpp', [\n            'pageTitle' => 'Cek SPP Siswa',\n        ]);\n    }\n\n    /**\n     * Mencari semua siswa berdasarkan nomor telepon dan menampilkan daftar pilihan.\n     */\n    public function findSiswaByPhone(Request $request)\n    {\n        $validated = $request->validate([\n            'nomor_telepon_wali' => 'required|string',\n        ]);\n\n        $phoneInput = $validated['nomor_telepon_wali'];\n        $normalizedPhone = preg_replace('/[\\s\\-\\+]/', '', $phoneInput);\n\n        $siswas = Siswa::where(function ($query) use ($normalizedPhone) {\n                $query->where('nomor_telepon_wali', $normalizedPhone)\n                      ->orWhere('nomor_telepon_wali', '0' . ltrim($normalizedPhone, '62'))\n                      ->orWhere('nomor_telepon_wali', '62' . ltrim($normalizedPhone, '0'));\n            })\n            ->with('kelas:id_kelas,nama_kelas')\n            ->orderBy('nama_siswa')\n            ->get();\n\n        if ($siswas->isEmpty()) {\n            return Redirect::back()->withErrors(['lookup' => 'Nomor telepon tidak terdaftar. Pastikan nomor yang Anda masukkan sudah benar.']);\n        }\n\n        // Simpan nomor telepon ke session untuk ditampilkan kembali di form\n        session(['search_phone_number' => $phoneInput]);\n\n        // Kirim daftar siswa yang ditemukan ke halaman yang sama\n        return Inertia::render('Public/CekSpp', [\n            'pageTitle' => 'Pilih Siswa',\n            'foundSiswa' => $siswas->map(fn($siswa) => [\n                'id_siswa' => $siswa->id_siswa,\n                'nama_siswa' => $siswa->nama_siswa,\n                'kelas_nama' => $siswa->kelas?->nama_kelas ?? 'Belum ada kelas',\n            ]),\n            'searchedPhone' => $phoneInput,\n        ]);\n    }\n\n    /**\n     * Menampilkan halaman tagihan lengkap untuk siswa yang dipilih.\n     */\n    public function showTagihan(Siswa $siswa)\n    {\n        $siswa->load('user'); // Load relasi user jika ada\n\n        $pendingSppInvoices = $siswa->invoices()\n                               ->where('type', 'spp')\n                               ->where('status', 'PENDING')\n                               ->orderBy('periode_tagihan', 'asc')\n                               ->get();\n\n        $lastPaidInvoice = $siswa->invoices()\n                                ->where('type', 'spp')\n                                ->where('status', 'PAID')\n                                ->orderBy('periode_tagihan', 'desc')\n                                ->first();\n\n        return Inertia::render('Public/CekSpp', [\n            'pageTitle' => 'Tagihan SPP',\n            'selectedSiswa' => [ // Kirim data siswa yang sudah terpilih\n                'id_siswa' => $siswa->id_siswa,\n                'nama_siswa' => $siswa->nama_siswa,\n                'nis' => $siswa->nis,\n                'jumlah_spp_custom' => (float) $siswa->jumlah_spp_custom,\n                'admin_fee_custom' => (float) $siswa->admin_fee_custom,\n                'has_user_account' => $siswa->user()->exists(),\n            ],\n            'sppInvoices' => $pendingSppInvoices->map(function ($invoice) {\n                return [\n                    'id' => $invoice->id,\n                    'description' => $invoice->description,\n                    'total_amount' => (float) $invoice->total_amount,\n                    'total_amount_formatted' => 'Rp ' . number_format($invoice->total_amount, 0, ',', '.'),\n                    'status' => $invoice->status,\n                    'periode_tagihan' => $invoice->periode_tagihan->format('Y-m-d'),\n                    'is_projected' => false,\n                ];\n            }),\n            'lastPaidPeriod' => $lastPaidInvoice ? $lastPaidInvoice->periode_tagihan->format('Y-m-d') : null,\n        ]);\n    }\n}\n"
        }
    ]
}