{
    "sourceFile": "app/Http/Controllers/RegistrationController.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1754202628050,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1754202628050,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\Kelas;\nuse App\\Models\\LegalDocument;\nuse App\\Models\\Siswa;\nuse App\\Models\\User;\nuse App\\Models\\Invoice;\nuse App\\Mail\\RegistrationSuccess;\nuse App\\Services\\XenditService;\nuse Carbon\\Carbon;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Illuminate\\Support\\Facades\\Log;\nuse Illuminate\\Support\\Facades\\Mail;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Str;\nuse Illuminate\\Validation\\Rules;\nuse Inertia\\Inertia;\nuse Throwable;\n\nclass RegistrationController extends Controller\n{\n    /**\n     * Menampilkan form pendaftaran.\n     */\n    public function createAcademy()\n    {\n        $academyClass = Kelas::where('nama_kelas', 'Persija Academy')->firstOrFail();\n        $terms = LegalDocument::latest('published_at')->first();\n\n        return Inertia::render('Public/RegisterAcademy', [\n            'pageTitle' => 'Formulir Pendaftaran Siswa Academy',\n            'academyClass' => [\n                'id_kelas' => $academyClass->id_kelas,\n                'nama_kelas' => $academyClass->nama_kelas,\n                'biaya_pendaftaran_normal' => (float) $academyClass->biaya_pendaftaran,\n                'biaya_pendaftaran_saat_ini' => $academyClass->getBiayaPendaftaranSaatIni(),\n            ],\n            'termsDocument' => $terms,\n        ]);\n    }\n\n    public function createSs()\n    {\n        $terms = LegalDocument::latest('published_at')->first();\n        $allKelas = Kelas::where('deskripsi', 'Soccer School')\n                         ->orderBy('nama_kelas')\n                         ->get();\n\n        return Inertia::render('Public/RegisterSs', [\n            'pageTitle' => 'Formulir Pendaftaran Siswa Soccer School',\n            'allKelas' => $allKelas->map(function ($kelas) {\n                return [\n                    'id_kelas' => $kelas->id_kelas,\n                    'nama_kelas' => $kelas->nama_kelas,\n                    'kode_cabang' => $kelas->kode_cabang,\n                    'biaya_pendaftaran_normal' => (float) $kelas->biaya_pendaftaran,\n                    'biaya_pendaftaran_saat_ini' => $kelas->getBiayaPendaftaranSaatIni(),\n                ];\n            }),\n            'termsDocument' => $terms,\n        ]);\n    }\n\n    /**\n     * Memvalidasi kode promo secara real-time.\n     */\n    public function validatePromoCode(Request $request)\n    {\n        $validated = $request->validate([\n            'id_kelas' => 'required|uuid|exists:kelas,id_kelas',\n            'kode_promo' => 'required|string',\n        ]);\n\n        $kelas = Kelas::findOrFail($validated['id_kelas']);\n        $hargaNormal = (float) $kelas->biaya_pendaftaran;\n        $hargaSetelahDiskon = $kelas->getBiayaPendaftaranSaatIni($validated['kode_promo']);\n\n        if ($hargaSetelahDiskon < $hargaNormal) {\n            return response()->json([\n                'success' => true,\n                'message' => 'Kode promo berhasil diterapkan!',\n                'new_price' => $hargaSetelahDiskon,\n            ]);\n        }\n\n        return response()->json([\n            'success' => false,\n            'message' => 'Kode promo tidak valid atau tidak berlaku untuk kelas ini.',\n        ], 422);\n    }\n\n    /**\n     * Menyimpan data pendaftaran, membuat user & siswa pending, dan membuat invoice.\n     */\n    public function store(Request $request, XenditService $xenditService)\n    {\n        $validated = $request->validate([\n            'nama_siswa' => 'required|string|max:255',\n            'tanggal_lahir' => 'required|date',\n            'id_kelas' => 'required|uuid|exists:kelas,id_kelas',\n            'user_name' => 'required|string|max:255',\n            'email_wali' => 'required|string|email|max:255|unique:users,email',\n            'nomor_telepon_wali' => 'required|string|max:20',\n            'user_password' => ['required', 'confirmed', Rules\\Password::defaults()],\n            'terms' => 'accepted',\n            'legal_document_id' => 'required|exists:legal_documents,id',\n            'kode_promo' => 'nullable|string|exists:promos,kode_promo',\n        ]);\n\n        $kelas = Kelas::findOrFail($validated['id_kelas']);\n\n        try {\n            $invoiceUrl = DB::transaction(function () use ($validated, $kelas, $xenditService, $request) {\n                $biayaFinal = $kelas->getBiayaPendaftaranSaatIni($validated['kode_promo']);\n                $adminFee = (float)($kelas->admin_fee_custom ?? 0);\n                $totalAmount = $biayaFinal + $adminFee;\n\n                $user = User::create([\n                    'name' => $validated['user_name'],\n                    'email' => $validated['email_wali'],\n                    'password' => Hash::make($validated['user_password']),\n                ]);\n                $user->assignRole('siswa');\n\n                $siswa = Siswa::create([\n                    'nama_siswa' => $validated['nama_siswa'],\n                    'tanggal_lahir' => $validated['tanggal_lahir'],\n                    'id_kelas' => $kelas->id_kelas,\n                    'id_user' => $user->id,\n                    'nomor_telepon_wali' => $validated['nomor_telepon_wali'],\n                    'status_siswa' => 'pending_payment',\n                    'tanggal_bergabung' => now(),\n                    'jumlah_spp_custom' => $kelas->biaya_spp_default,\n                    'admin_fee_custom' => $adminFee,\n                ]);\n                $siswa->generateNis();\n\n                $deskripsi = \"Biaya Pendaftaran - {$siswa->nama_siswa} (NIS: {$siswa->nis})\";\n                $invoice = Invoice::create([\n                    'id_siswa' => $siswa->id_siswa,\n                    'user_id' => $user->id,\n                    'type' => 'pendaftaran',\n                    'description' => $deskripsi,\n                    'amount' => $biayaFinal,\n                    'admin_fee' => $adminFee,\n                    'total_amount' => $totalAmount,\n                    'due_date' => now()->addMinutes(30),\n                    'status' => 'PENDING',\n                    'external_id_xendit' => 'REG-'.$siswa->id_siswa.'-'.strtoupper(Str::random(6)),\n                ]);\n\n                // ### PERBAIKAN ###\n                // Membuat URL sukses yang dinamis dengan menyertakan ID siswa\n                $successUrl = route('registration.success', ['siswa' => $siswa->id_siswa]);\n\n                $payerInfo = ['email' => $user->email, 'name' => $user->name, 'phone' => $siswa->nomor_telepon_wali];\n                $xenditInvoiceData = $xenditService->createInvoice($biayaFinal, $adminFee, $deskripsi, $payerInfo, $invoice->external_id_xendit, $successUrl, route('payment.failure'), now()->addMinutes(30), ['email', 'whatsapp']);\n\n                if (!$xenditInvoiceData || !isset($xenditInvoiceData['invoice_url'])) {\n                    throw new \\Exception('Gagal membuat link pembayaran pendaftaran.');\n                }\n\n                $invoice->update([\n                    'xendit_invoice_id' => $xenditInvoiceData['id'],\n                    'xendit_payment_url' => $xenditInvoiceData['invoice_url'],\n                ]);\n                \n                $dataForEmail = [\n                    'nama_wali' => $user->name,\n                    'nama_siswa' => $siswa->nama_siswa,\n                    'nis' => $siswa->nis,\n                    'email_wali' => $user->email,\n                ];\n                Mail::to($user->email)->send(new RegistrationSuccess($dataForEmail));\n\n                // Hapus kode yang menyimpan ke session\n                // session(['registration_success_siswa_id' => $siswa->id_siswa]);\n\n                return $xenditInvoiceData['invoice_url'];\n            });\n\n            return Inertia::location($invoiceUrl);\n\n        } catch (Throwable $e) {\n            Log::error('Gagal memproses pendaftaran: ' . $e->getMessage());\n            return back()->withErrors(['general' => 'Terjadi kesalahan saat memproses pendaftaran. Silakan coba lagi.']);\n        }\n    }\n}\n"
        }
    ]
}