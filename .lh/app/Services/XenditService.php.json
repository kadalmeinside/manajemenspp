{
    "sourceFile": "app/Services/XenditService.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1754370491020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1754370491020,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Services;\n\nuse Illuminate\\Support\\Facades\\Http;\nuse Illuminate\\Support\\Facades\\Log;\nuse Carbon\\Carbon;\n\nclass XenditService\n{\n    protected $apiKey;\n    protected $baseUrl;\n\n    public function __construct()\n    {\n        $this->apiKey = config('xendit.api_key');\n        $this->baseUrl = config('xendit.base_url');\n    }\n\n    /**\n     * Membuat invoice di Xendit dengan rincian biaya yang transparan.\n     *\n     * @param float $baseAmount Jumlah pokok (misal: total SPP)\n     * @param float $feeAmount Jumlah biaya admin\n     * @param string $description Deskripsi tagihan\n     * @param array $payerInfo Informasi pembayar ['email', 'name', 'phone']\n     * @param string $externalId ID eksternal unik\n     * @param string $successRedirectUrl URL redirect saat sukses\n     * @param string $failureRedirectUrl URL redirect saat gagal\n     * @param \\Carbon\\Carbon $expiryDate Tanggal kedaluwarsa\n     * @param array $notificationChannels Saluran notifikasi\n     * @return array|null\n     */\n    public function createInvoice(\n        float $baseAmount,\n        float $feeAmount,\n        string $description,\n        array $payerInfo,\n        string $externalId,\n        string $successRedirectUrl,\n        string $failureRedirectUrl,\n        Carbon $expiryDate,\n        array $notificationChannels = ['email']\n    ) {\n        $encodedApiKey = base64_encode($this->apiKey . ':');\n        $totalAmount = $baseAmount + $feeAmount;\n\n        // Logika durasi yang disederhanakan\n        $invoiceDuration = $expiryDate->isFuture() ? (int) now()->diffInSeconds($expiryDate) : 0;\n        $minDuration = 300; // 5 menit\n\n        if ($invoiceDuration < $minDuration) {\n            Log::warning('[XenditService] Durasi invoice kurang dari minimum, disesuaikan.', ['original' => $invoiceDuration, 'adjusted' => $minDuration]);\n            $invoiceDuration = $minDuration;\n        }\n\n        $payload = [\n            'external_id' => $externalId,\n            'amount' => $totalAmount,\n            'description' => $description,\n            'customer' => [\n                'given_names' => $payerInfo['name'] ?? 'Siswa',\n                'mobile_number' => $payerInfo['phone'] ?? null,\n            ],\n            'invoice_duration' => $invoiceDuration,\n            'success_redirect_url' => $successRedirectUrl,\n            'failure_redirect_url' => $failureRedirectUrl,\n            'currency' => 'IDR',\n            'payment_methods' => $this->getPaymentMethods(),\n        ];\n\n        // Hanya tambahkan email dan notifikasi jika email valid.\n        if (!empty($payerInfo['email'])) {\n            $payload['payer_email'] = $payerInfo['email'];\n            $payload['customer']['email'] = $payerInfo['email'];\n            $payload['notification_channels'] = $notificationChannels;\n        } else {\n            // Jika tidak ada email, jangan kirim notifikasi email.\n            $payload['notification_channels'] = []; \n        }\n\n        // Tambahkan rincian biaya jika ada.\n        if ($feeAmount > 0) {\n            $payload['fees'] = [\n                ['type' => 'ADMIN', 'value' => $feeAmount]\n            ];\n        }\n\n        Log::info('[XenditService] Creating invoice with final payload:', $payload);\n\n        $response = Http::withHeaders([\n            'Authorization' => 'Basic ' . $encodedApiKey,\n            'Content-Type' => 'application/json',\n        ])->post(\"{$this->baseUrl}/v2/invoices\", $payload);\n\n        if ($response->successful()) {\n            Log::info('[XenditService] Invoice created successfully.', ['external_id' => $externalId]);\n            return $response->json();\n        }\n\n        logger()->error('Xendit Invoice Creation Failed (Service)', [\n            'external_id' => $externalId,\n            'status' => $response->status(),\n            'body' => $response->body(),\n            'sent_payload' => $payload\n        ]);\n        return null;\n    }\n\n    protected function getPaymentMethods()\n    {\n        return [\n            'BCA', 'BNI', 'BRI', 'MANDIRI', 'PERMATA',\n            'CREDIT_CARD',\n            'OVO', 'DANA', 'LINKAJA', 'SHOPEEPAY',\n            'QRIS'\n        ];\n    }\n\n    /**\n     * @deprecated Metode ini menggunakan model TagihanSpp yang lama. Gunakan createInvoice.\n     * Membuat sesi pembayaran untuk Xendit Snap.\n     */\n    public function createSnapCheckoutSession(\\App\\Models\\TagihanSpp $tagihan)\n    {\n        $encodedApiKey = base64_encode($this->apiKey . ':');\n\n        $payload = [\n            'reference_id' => $tagihan->external_id_xendit,\n            'currency' => 'IDR',\n            'amount' => (float) $tagihan->total_tagihan,\n            'checkout_method' => 'ONE_TIME_PAYMENT',\n            'channel_code' => 'ID_OVO',\n            'customer' => [\n                'given_names' => $tagihan->siswa->nama_siswa,\n                'email' => $tagihan->siswa->user->email,\n                'mobile_number' => $tagihan->siswa->nomor_telepon_wali,\n            ],\n            'metadata' => [\n                'tagihan_id' => $tagihan->id_tagihan,\n                'periode' => $tagihan->periode_tagihan->isoFormat('MMMM YYYY'),\n            ],\n            'redirect_url' => route('payment.success')\n        ];\n\n        $response = Http::withHeaders([\n            'Authorization' => 'Basic ' . $encodedApiKey,\n            'Content-Type' => 'application/json',\n        ])->post(\"{$this->baseUrl}/checkout_sessions\", $payload);\n\n\n        if ($response->successful()) {\n            return $response->json();\n        }\n\n        logger()->error('Xendit Snap Session Creation Failed', [\n            'reference_id' => $tagihan->external_id_xendit,\n            'status' => $response->status(),\n            'body' => $response->body()\n        ]);\n        return null;\n    }\n\n    /**\n     * Membatalkan (expire) sebuah invoice di Xendit.\n     */\n    public function expireInvoice(string $invoiceId)\n    {\n        $encodedApiKey = base64_encode($this->apiKey . ':');\n\n        $response = Http::withHeaders([\n            'Authorization' => 'Basic ' . $encodedApiKey,\n        ])->post(\"{$this->baseUrl}/invoices/{$invoiceId}/expire!\");\n\n        if ($response->successful()) {\n            Log::info('[Xendit Service] Invoice expired successfully.', ['xendit_invoice_id' => $invoiceId]);\n            return $response->json();\n        }\n\n        Log::error('[Xendit Service] Failed to expire invoice.', [\n            'xendit_invoice_id' => $invoiceId,\n            'status' => $response->status(),\n            'body' => $response->body()\n        ]);\n\n        return null;\n    }\n}\n"
        }
    ]
}